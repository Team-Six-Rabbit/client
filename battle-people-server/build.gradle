plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'checkstyle'
}

group = 'com.woowahanrabbits'
version = '0.0.1-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.openvidu:openvidu-java-client:2.19.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Adding Jackson dependencies explicitly
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.4'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.4'


}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    configFile = file('checkstyle/naver-checkstyle-rules.xml')
    configProperties = ['suppressionFile': 'checkstyle/naver-checkstyle-suppressions.xml']
    sourceSets = [sourceSets.main, sourceSets.test]
    ignoreFailures = false
    showViolations = true
}

checkstyleMain.source = fileTree('src/main/java')
checkstyleTest.source = fileTree('src/test/java')

tasks.register('installGitHooks', Copy) {
    group = 'git hooks'
    description = 'Installs Git hooks'
    from file("${rootDir}/git-hooks/")
    into file("${rootDir}/../.git/hooks/")
    fileMode(0755)
}
